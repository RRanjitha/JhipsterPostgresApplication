{"remainingRequest":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/ts-loader/index.js??ref--10-3!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/angular-router-loader/src/index.js!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/tslint-loader/index.js!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/src/main/webapp/app/entities/sector/sector.service.ts","dependencies":[{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/src/main/webapp/app/entities/sector/sector.service.ts","mtime":1533031093066},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar moment = require(\"moment\");\nvar operators_1 = require(\"rxjs/operators\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar shared_1 = require(\"app/shared\");\nvar SectorService = /** @class */ (function () {\n    function SectorService(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + 'api/sectors';\n    }\n    SectorService.prototype.create = function (sector) {\n        var _this = this;\n        var copy = this.convertDateFromClient(sector);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectorService.prototype.update = function (sector) {\n        var _this = this;\n        var copy = this.convertDateFromClient(sector);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectorService.prototype.find = function (id) {\n        var _this = this;\n        return this.http\n            .get(this.resourceUrl + \"/\" + id, { observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateFromServer(res); }));\n    };\n    SectorService.prototype.query = function (req) {\n        var _this = this;\n        var options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(operators_1.map(function (res) { return _this.convertDateArrayFromServer(res); }));\n    };\n    SectorService.prototype.delete = function (id) {\n        return this.http.delete(this.resourceUrl + \"/\" + id, { observe: 'response' });\n    };\n    SectorService.prototype.convertDateFromClient = function (sector) {\n        var copy = Object.assign({}, sector, {\n            date: sector.date != null && sector.date.isValid() ? sector.date.toJSON() : null\n        });\n        return copy;\n    };\n    SectorService.prototype.convertDateFromServer = function (res) {\n        res.body.date = res.body.date != null ? moment(res.body.date) : null;\n        return res;\n    };\n    SectorService.prototype.convertDateArrayFromServer = function (res) {\n        res.body.forEach(function (sector) {\n            sector.date = sector.date != null ? moment(sector.date) : null;\n        });\n        return res;\n    };\n    SectorService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], SectorService);\n    return SectorService;\n    var _a;\n}());\nexports.SectorService = SectorService;\n",{"version":3,"file":"/home/ranjithar/Documents/Jhipster/PROJECT/postgres/src/main/webapp/app/entities/sector/sector.service.ts","sourceRoot":"","sources":["/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/angular-router-loader/src/index.js!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/node_modules/tslint-loader/index.js!/home/ranjithar/Documents/Jhipster/PROJECT/postgres/src/main/webapp/app/entities/sector/sector.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as moment from 'moment';\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared';\nimport { ISector } from 'app/shared/model/sector.model';\n\ntype EntityResponseType = HttpResponse<ISector>;\ntype EntityArrayResponseType = HttpResponse<ISector[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class SectorService {\n    private resourceUrl = SERVER_API_URL + 'api/sectors';\n\n    constructor(private http: HttpClient) {}\n\n    create(sector: ISector): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(sector);\n        return this.http\n            .post<ISector>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(sector: ISector): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(sector);\n        return this.http\n            .put<ISector>(this.resourceUrl, copy, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<ISector>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<ISector[]>(this.resourceUrl, { params: options, observe: 'response' })\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n    }\n\n    private convertDateFromClient(sector: ISector): ISector {\n        const copy: ISector = Object.assign({}, sector, {\n            date: sector.date != null && sector.date.isValid() ? sector.date.toJSON() : null\n        });\n        return copy;\n    }\n\n    private convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        res.body.date = res.body.date != null ? moment(res.body.date) : null;\n        return res;\n    }\n\n    private convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        res.body.forEach((sector: ISector) => {\n            sector.date = sector.date != null ? moment(sector.date) : null;\n        });\n        return res;\n    }\n}\n"]}]}